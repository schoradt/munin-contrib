#!/usr/bin/php
<?php
/**
 * solr8_
 
 * @author : Sven Schoradt (schoradt@netztierpfleger.de)
 *
 * Derived from alexandre.simon@rbs.fr's plugin wfsolr_

 * This plugin allows to graph any data present in the stats report on a
 * multi-core Solr instance
 * AKA : http://127.0.0.1:8983/solr/admin/metrics
 * 
 * Verify the server where the munin-node instance is can access that URL
 *
 * You need to have a PHP 5.2.6+ CLI installed too with curl extension or
 * allow_url_fopen directive on
 *
 * Once the plugin is available you can symlink it with the following naming convention :
 * solr-metrics-[name of the core]-[name of the stats section - ex.: CORE]-[name of the entry in the xml - ex.: searcher]-[name of the stat to graph - ex.: numDocs]
 *
 */

// #%# family=auto
// #%# capabilities=autoconf suggest

$action = isset($argv[1]) ? $argv[1] : '';

$core = null;

$category = null;
$property = null;
$item = null;
$valueitem = null;
$type = 'GAUGE';

$prog = basename($argv[0]);
$prog = preg_replace('/^solr8_/', '', $prog);

if ($prog) {
	$tabParams = explode('-', $prog);
} else {
	$tabParams = [];
}

array_unshift($tabParams, 'solr8_');

$tabParamsCount = count($tabParams);

$pathAliases = array(
	"requests" 						=> array('COUNTER', "QUERY", "/select", "requests"),
	"errors" 						=> array('COUNTER', "QUERY", "/select", "errors", "count"),
	"timeouts" 						=> array('COUNTER', "QUERY", "/select", "timeouts", "count"),

	"numDocs" 						=> array('GAUGE', "SEARCHER", "searcher", "numDocs"),
	"indexSize" 					=> array('GAUGE', "INDEX", "size"),

	"requestTimes" 					=> array('GAUGE', "QUERY", "/select", "requestTimes", "meanRate"),
	"updateTimes" 					=> array('GAUGE', "UPDATE", "/update", "requestTimes", "meanRate"),
);

if ($tabParamsCount == 5) {
	$core = $tabParams[1];
	$category = $tabParams[2];
	$item = $tabParams[3];
	$property = $tabParams[4];
} elseif ($tabParamsCount == 3) {
	$core = $tabParams[1];
	$pathAlias = $tabParams[2];
} elseif ($tabParamsCount == 2) {
	$pathAlias = $tabParams[1];
}

if (isset($pathAlias)) {
	if (isset($pathAliases[$pathAlias])) {
		list($type, $category, $item, $property, $valueitem) = array_pad($pathAliases[$pathAlias], 5, null);
	} else {
		echo "Unknown alias: $pathAlias\n";

		exit(1);
	}
}

function getenvdef($name, $defaultValue) {
	$val = getenv($name);

	if ($val === false) {
		return $defaultValue;
	}

	return $val;
}

function getSolrAdminUrl($core = null) {
	$solrHost       = getenvdef("solr_host", "127.0.0.1");
	$solrPort       = getenvdef("solr_port", "8080");
	$solrWebappName = getenvdef("solr_webapp", "solr");

	$url = "http://$solrHost:$solrPort/$solrWebappName/";

	if ($core !== null) {
		$url .= "$core/";
	}

	$url .= "admin";

	return $url;
}

/**
 * Assure some conversions. KB, MB and GB are converted to Bytes
 */
function wffloatval($val) {
	$fVal = floatval(str_replace(",", ".", $val));

	$valEnd = substr($val, -2);

	if ($valEnd == "KB") {
		$fVal = $fVal * 1024;
	} elseif ($valEnd == "MB") {
		$fVal = $fVal * 1048576;
	} elseif ($valEnd == "GB") {
		$fVal = $fVal * 1073741824;
	}

	return $fVal;
}

function wfGetUrl($url) {
	if (extension_loaded("curl")) {
		$ch = curl_init();

        $options = array(CURLOPT_URL => $url);
        $options[CURLOPT_TIMEOUT] = 5;
        $options[CURLOPT_CONNECTTIMEOUT] = 5;
		$options[CURLOPT_RETURNTRANSFER] = true;

        curl_setopt_array($ch, $options);

        $content = curl_exec($ch);
        curl_close($ch);
	} else {
		$content = file_get_contents($url);
	}

	if ($content === false) {
		throw new Exception("Could not get $url", 8);
	}

	return $content;
}

function configure($core, $category, $property, $item, $type) {
	if ($property == "indexSize") {
		echo "graph_args --base 1024 -l 0\n";
	}

	$itemName = $property;

	if (!$itemName) {
		$itemName = $item;
	}

	echo "graph_category Solr8 $core\n";
	echo "graph_title $category $itemName\n";
	echo "graph_vlabel $itemName\n";

	$fieldname = '';

	if ($core !== null)	{
		$fieldname .= $core;
	} else {
		$fieldname .= "Default_core";
	}

	$fieldname .= $item . $property . '_solr';

	$fieldname = _cleanupFieldname($fieldname);

	echo $fieldname . '.label ' . $itemName . "\n";
	echo $fieldname . '.type ' . $type . "\n";
	echo $fieldname . '.min 0' . "\n";
}

function autoconfig() {
	$url = getSolrAdminUrl()."/cores?action=STATUS&wt=xml";
	$doc = new DOMDocument();

	if (!$doc->loadXML(wfGetUrl($url))) {
		echo "no [Could not load $url as XML]\n";
	} else {
		echo "yes\n";
	}
}

function suggest() {
	global $pathAliases;

	$url = getSolrAdminUrl()."/cores?action=STATUS&wt=xml";

	$doc = new DOMDocument();

	if (!$doc->loadXML(wfGetUrl($url))) {
		echo "Could not load $url as XML\n";

		return;
	}

	$xpath = new DOMXpath($doc);

	$names = $xpath->query("/response/lst[@name='status']/lst/str[@name='name']");

	$aliases = array_keys($pathAliases);

	foreach ($names as $nameAttr) {
		$coreName = trim($nameAttr->textContent);

		foreach ($aliases as $alias) {
			if ($coreName) {
				echo "$coreName-";
			}

			echo "$alias\n";
		}
	}
}

function _countElements($element) {
	$count = 0;

	foreach($element->childNodes as $node) {
		if(!($node instanceof \DomText)) {
			$count++;
		}
	}

	return $count;
}

function _cleanupFieldname($fieldname) {
	$fieldname = preg_replace('/^[^A-Za-z_]/', '_', $fieldname);
	$fieldname = preg_replace('/[^A-Za-z0-9_]/', '_', $fieldname);

	return $fieldname;
}

function measure($core, $category, $property, $item, $valueitem) {
	if ($core === null) {
		throw new Exception("No core defined", 0);
	}

	if ($category === null) {
		throw new Exception("No category defined", 0);
	}

	$url = getSolrAdminUrl()."/metrics?wt=xml";

	$doc = new DOMDocument();

	if (!$doc->loadXML(wfGetUrl($url))) {
		throw new Exception("Could not load $url as XML", 0);
	}

	$xpath = new DOMXpath($doc);

	$name = $category.'.'.$item.($property?'.'.$property:'');
	$path = 'lst[@name="metrics"]/lst[@name="solr.core.'.$core.'"]/*[@name="'.$name.'"]';
	
	$elements = $xpath->query($path);

	foreach($elements as $element) {
		$count = _countElements($element);

		$fieldname = $core . $item . $property . '_solr';

		$fieldname = _cleanupFieldname($fieldname);

		if ($count > 0) {
			foreach($element->childNodes as $c) {
				if(!($c instanceof \DomText)) {
					if ($valueitem && $valueitem == $c->getAttribute('name')) {
						echo $fieldname . '.value ' . wffloatval(trim($c->textContent)) . "\n";
					} else if (!$valueitem) {
						echo $fieldname . '.'.$c->getAttribute('name').'.value ' . wffloatval(trim($c->textContent)) . "\n";
					}
				}
			}
		} else {
			echo $fieldname . '.value ' . wffloatval(trim($element->textContent)) . "\n";
		}
		
		return;
	}

	throw new Exception("Bad path: $category | $item | $property on $core", 0);
}

try {
	if ("config" == $action) {
		configure($core, $category, $property, $item, $type);

	} elseif ("autoconf" == $action) {
		autoconfig();

	} elseif ("suggest" == $action) {
		suggest();

	} else {
		measure($core, $category, $property, $item, $valueitem);
	}
} catch (Exception $e) {
	echo "ERROR: ".$e->getMessage()."\n";

	$exitCode = ($e->getCode() != 0) ? $e->getCode() : 0;

	exit($exitCode);
}
